def pipelineComponents = ["front-end", "services"]
def builds = [:]
def unitTests = [:]
def integrationTests = [:]
def integrationDeployments = [:]
def stagingDeployments = [:]
def workspaceDirectory = "/root/.jenkins/workspace/" + env.JOB_BASE_NAME
def buildDirectory = workspaceDirectory + "/build-$BUILD_NUMBER"

def notifySlack(String stage, String buildStatus = 'STARTED') {
  // Build status of null means success.
  buildStatus = buildStatus ?: 'SUCCESS'

  def color
  if (buildStatus == 'STARTED') {
    color = '#D4DADF'
  } else if (buildStatus == 'SUCCESS') {
    color = '#BDFFC3'
  } else if (buildStatus == 'FAILED') {
    color = '#FFFE89'
  } else {
    color = '#FF9FA1'
  }

  def msg = "${buildStatus}: ${stage}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

  slackSend(color: color, message: msg)
}

for (x in pipelineComponents) {
  def jobName = x.trim()
  // create builds
  builds[jobName] = {
    build job: jobName, parameters: [
      booleanParam(name: 'EXEC_BUILD', value: true),
      booleanParam(name: 'EXEC_UNITTEST', value: false),
      booleanParam(name: 'EXEC_DEPLOY', value: false),
      booleanParam(name: 'EXEC_INTEGRATIONTEST', value: false),
      booleanParam(name: 'EXEC_CLEANUP', value: false),
      stringParam(name: 'BUILD_DIRECTORY', value: buildDirectory),
      stringParam(name: 'VPC_NAME', value: env.JOB_BASE_NAME)
    ]
  }
  // create unit test runs
  unitTests[jobName] = {
    build job: jobName, parameters: [
      booleanParam(name: 'EXEC_BUILD', value: false),
      booleanParam(name: 'EXEC_UNITTEST', value: true),
      booleanParam(name: 'EXEC_DEPLOY', value: false),
      booleanParam(name: 'EXEC_INTEGRATIONTEST', value: false),
      booleanParam(name: 'EXEC_CLEANUP', value: false),
      stringParam(name: 'BUILD_DIRECTORY', value: buildDirectory),
      stringParam(name: 'VPC_NAME', value: env.JOB_BASE_NAME)
    ]
  }
  // create integration test runs
  integrationTests[jobName] = {
    build job: jobName, parameters: [
      booleanParam(name: 'EXEC_BUILD', value: false),
      booleanParam(name: 'EXEC_UNITTEST', value: false),
      booleanParam(name: 'EXEC_DEPLOY', value: false),
      booleanParam(name: 'EXEC_INTEGRATIONTEST', value: true),
      booleanParam(name: 'EXEC_CLEANUP', value: false),
      stringParam(name: 'BUILD_DIRECTORY', value: buildDirectory),
      stringParam(name: 'VPC_NAME', value: env.JOB_BASE_NAME)
    ]
  }
  // create deployments
  integrationDeployments[jobName] = {
    build job: jobName, parameters: [
      booleanParam(name: 'EXEC_BUILD', value: false),
      booleanParam(name: 'EXEC_UNITTEST', value: false),
      booleanParam(name: 'EXEC_DEPLOY', value: true),
      booleanParam(name: 'EXEC_INTEGRATIONTEST', value: false),
      booleanParam(name: 'EXEC_CLEANUP', value: false),
      stringParam(name: 'BUILD_DIRECTORY', value: buildDirectory),
      stringParam(name: 'VPC_NAME', value: "integration")
    ]
  }
  // create deployments
  stagingDeployments[jobName] = {
    build job: jobName, parameters: [
      booleanParam(name: 'EXEC_BUILD', value: false),
      booleanParam(name: 'EXEC_UNITTEST', value: false),
      booleanParam(name: 'EXEC_DEPLOY', value: true),
      booleanParam(name: 'EXEC_INTEGRATIONTEST', value: false),
      booleanParam(name: 'EXEC_CLEANUP', value: false),
      stringParam(name: 'BUILD_DIRECTORY', value: buildDirectory),
      stringParam(name: 'VPC_NAME', value: "staging")
    ]
  }
}

properties([
  buildDiscarder(
    logRotator(
      daysToKeepStr: '1',
      numToKeepStr: '5'
    )
  )
])

node {
  sh "mkdir -p ${buildDirectory}"
  dir(buildDirectory) {
    try {
      stage("SCM Checkout") {
        try {
          checkout scm
        } catch (e) {
          notifySlack("SCM Checkout", "FAILED")
          throw e
        }
      }
      stage("Build") {
        script {
          sh "pushd core; npm i; popd"
          sh "pushd domain; npm i; popd"
        }
        try {
          parallel builds
        } catch (e) {
          notifySlack("Build", "FAILED")
          throw e
        }
      }
      stage("Unit Test") {
        try {
          parallel unitTests
        } catch (e) {
          notifySlack("Unit Test", "FAILED")
          throw e
        }
      }
      stage("Inspect") {
        withCredentials([string(credentialsId: 'SONARLOGIN', variable: 'SONARLOGIN')]) {
          script {
            // scan services for test coverage
            sh '(test -d services && find services -type d -maxdepth 1 -mindepth 1 -exec sh coverage.sh {} \\;) || true'
            // scan folders for test coverage
            sh 'sh coverage.sh app'
            sh 'sh coverage.sh core'
            sh 'sh coverage.sh domain'
            // merge coverage
            def script = 'rm -rf coverage ; mkdir coverage ; npx lcov-result-merger "**/lcov.info" coverage/all.info'
            sh script:script, returnStatus:true
            // clean up old test reports
            sh 'rm -f test-report.xml'
            // write header
            sh 'echo "<testExecutions version=\\"1\\">" > test-report.xml'
            // merge reports (safely, capturing error if none existed)
            script = 'find . -mindepth 2 -maxdepth 3 -name test-report.xml | xargs cat | grep -v "<\\?xml" | grep -v testExecutions >> test-report.xml'
            sh script:script, returnStatus:true
            // write footer
            sh 'echo "</testExecutions>" >> test-report.xml'
            // install typescript so sonar can run
            sh 'npm i typescript'
            // run sonar scan
            sh 'cat test-report.xml'
            sh 'sonar-scanner -Dsonar.login=$SONARLOGIN'
          }
        }
      }
      stage('Archive') {
        try {
          // Save Git commit hash in a file called git-commit.txt
          sh 'touch git-commit.txt'
          sh 'echo -e ' + env.GIT_COMMIT + ' >> git-commit.txt'
          // Compress all build products and Terraform templates into a zip file labeled with the environment and build number
          sh 'zip -r build-' + env.BUILD_TAG + ' git-commit.txt app/dist/* services/*/function.zip terraform/*'
          // Push the zip file to AWS S3
          sh 'aws s3 cp build-' + env.BUILD_TAG + '.zip s3://builds.{{.projectName}}.pac.pyramidchallenges.com/'
        } catch (e) {
          notifySlack("Archive", "FAILED")
          throw e
        }
      }
      stage("Deploy to Integration Environment") {
        try {
          parallel integrationDeployments
        } catch (e) {
          notifySlack("Deploy to Integration Environment", "FAILED")
          throw e
        }        
      }
      stage("508 Test") {
        sh 'cd 508-tests; npm i; npm run build; npm run test; npm run generate-report;'
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '508-tests', reportFiles: '508Report.html', reportName: '508 Report', reportTitles: ''])
      }
      stage("Integration Test") {
        script {
          sh 'cd integration-tests/gradle/wrapper; jar cf gradle-wrapper.jar *'
          def exitCode = sh(script: 'cd integration-tests; chmod 755 gradlew; ./gradlew clean test aggregate', returnStatus: true)
          publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'integration-tests/target/site/serenity', reportFiles: 'index.html', reportName: 'Serenity Report', reportTitles: ''])
          if (exitCode > 0) {
            sh 'one-or-more-integration-tests-failed'
            notifySlack("Integration Tests", "FAILED")
          }
        }
      }
      stage('Promote Release Candidate') {
        try {
          // Copy the build products zip file to a new zip file suffixed with "-rc"
          sh 'cp build-' + env.BUILD_TAG + '.zip build-' + env.BUILD_TAG + '-rc.zip'
          // Push the release candidate zip file to AWS S3
          sh 'aws s3 cp build-' + env.BUILD_TAG + '-rc.zip s3://builds.{{.projectName}}.pac.pyramidchallenges.com/'
        } catch (e) {
          notifySlack("Promote Release Candidate", "FAILED")
          throw e
        }
      }
      stage("Deploy to Staging Environment") {
        try {
          parallel stagingDeployments
        } catch (e) {
          notifySlack("Deploy to Staging Environment", "FAILED")
          throw e
        }
      }
    }
    catch (e) {
      throw e;
    }
    finally {
      dir(workspaceDirectory) {
        // Delete all but the latest five build directories
        script {
          sh 'find . -type d -maxdepth 1 -regex ".*@tmp" -exec rm -Rf {} \\;'
          sh 'find . -type d -maxdepth 1 ! -regex "\\.\\/build.*" -exec rm -Rf {} \\;'
          sh 'rm -Rf `ls | sort -Vr | tail -n +4`'
        }
      }
    }
  }
}
