def notifySlack(String stage, String buildStatus = 'STARTED') {
  // Build status of null means success.
  buildStatus = buildStatus ?: 'SUCCESS'

  def color
  if (buildStatus == 'STARTED') {
    color = '#D4DADF'
  } else if (buildStatus == 'SUCCESS') {
    color = '#BDFFC3'
  } else if (buildStatus == 'FAILED') {
    color = '#FFFE89'
  } else {
    color = '#FF9FA1'
  }

  def msg = "${buildStatus}: ${stage}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

  slackSend(color: color, message: msg)
}

node {
  stage("Pull Artifacts") {
    try {
      // Clear the working directory to avoid using older build products previously unzipped here
      sh 'rm -Rf *'
      // Pull the release candidate zip file
      sh 'aws s3 cp s3://builds.[psi[.projectName]].pac.pyramidchallenges.com/build-jenkins-release-through-staging-' + params.BUILD_NUMBER + '-rc.zip .'
    } catch (e) {
      notifySlack("Pull Artifacts", "FAILED")
      sh 'echo "No release candidate exists for the build number specified"'
      throw e
    }
  }
  stage("Deploy to Production") {
    try {
      // Unzip the release candidate build products
      sh 'unzip build-jenkins-release-through-staging-' + params.BUILD_NUMBER + '-rc.zip'
      // Apply Terraform templates
      sh 'pushd terraform/production; terraform init; terraform plan -out tfplan; terraform apply "tfplan"; popd'
      // Sync the application files with the application S3 bucket
      sh 'pushd app; aws s3 sync dist s3://production.[psi[.projectName]].pac.pyramidchallenges.com --acl public-read; popd'
    } catch (e) {
      notifySlack("Deploy to Production", "FAILED")
      throw e
    }
  }
}
